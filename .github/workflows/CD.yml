name: CD
on:
  push:
    branches:
      - 62-feat-workflow-action-버전-업데이트

env:
  REPOSITORY: istock-frontend
  ORGANIZATION: pororoz

jobs:
  push-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Runner 타임존 설정
        run: sudo timedatectl set-timezone 'Asia/Seoul'

      - name: Head Commit(Merge Commit)에 Tagging Version 추출
        id: version_name
        run: echo "version=$(echo '${{ github.event.head_commit.message }}' | egrep -o 'v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')" >> $GITHUB_OUTPUT

      - name: Node 설정
        uses: actions/setup-node@v1
        with:
          node-version: "18.x"

      - name: node_modules 폴더 캐싱
        uses: actions/cache@v2
        id: cache
        with:
          path: "**/client/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/client/yarn.lock') }}

      - name: node_modules 폴더 캐시가 없다면 dependencies 설치
        working-directory: "./client"
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Client 소스 빌드
        working-directory: "./client"
        run: yarn build

      - name: GitHub Container Registry 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.ORGANIZATION }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Docker images build 및 GitHub Container Registry로 push
        uses: docker/build-push-action@v4
        with:
          push: true
          platforms: linux/arm64/v8,linux/arm64
          tags: |
            ghcr.io/${{ env.ORGANIZATION }}/${{ env.REPOSITORY }}:latest
            ghcr.io/${{ env.ORGANIZATION }}/${{ env.REPOSITORY }}:${{ steps.version_name.outputs.version }}
          context: ./client

  deploy:
    needs: [push-docker-image]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo ${{ secrets.ACCESS_TOKEN }} | docker login https://ghcr.io -u pororoz --password-stdin
            docker pull ghcr.io/${{ env.ORGANIZATION }}/${{ env.REPOSITORY }}:latest
            docker run -d -it -p 3000:3000 --name react ghcr.io/${{ env.ORGANIZATION }}/${{ env.REPOSITORY }}
            docker image prune
            docker logout https://ghcr.io
